{"version":3,"sources":["utils/utils.js","utils/constants.js","components/cell.js","logic/minefield.js","components/board.js","components/score.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["range2d","a","b","Range","flatMap","_","x","map","y","List","toList","sum","nums","reduce","mapToFunction","seq","func","Map","mapToValue","value","gameStates","active","won","lost","stateToName","state","flip","get","gameFaces","0","1","2","Cell","props","content","isMine","mineCount","isRevealed","setIsRevealed","isFlagged","setIsFlagged","gameState","setGameState","correct","incorrect","mineClass","classNames","namedBools","staticNames","conditionalNames","Object","keys","filter","name","join","trim","getClsNames","style","width","height","className","onClick","e","preventDefault","onContextMenu","generateField","mineProb","coords","mineMap","chance","Math","random","z","countMap","neighbours","getBoolMap","neighbourCoords","c","includes","neighboursForAll","zs","Set","neighbouringZeros","lastFrontier","fronteer","toReveal","size","filterNot","union","Board","revealMap","setRevealMap","flagMap","setFlagMap","checkGameOver","cells","localRevealMap","localFlagMap","set","zeros","frontier","reveal","merge","mapEntries","has","key","Score","minesLeft","newGameButton","face","role","aria-label","Game","useState","setWidth","setMineProb","createNewMaps","setMaps","createNewBoolMap","useEffect","roundToTenth","n","round","valueSeq","max","min","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ce56b7d.chunk.js","sourcesContent":["import { List, Map, Range } from 'immutable';\n\nexport const range2d = (a, b) =>\n  // returns an Array of List pairs.\n\n  // flat map concats the inner arrays, so we get each row's coords\n  // directly after the last, in the same outer Array\n  Range(0, a)\n    .flatMap((_, x) =>\n      // this is an array of coords\n      Range(0, b).map((_, y) => List([x, y]))\n    )\n    .toList();\n\nexport const rand = chance => Math.random() < chance;\n\nexport const sum = nums => nums.reduce((a, b) => a + b, 0);\n\nexport const getClsNames = (namedBools, staticNames = '') => {\n  const conditionalNames = Object.keys(namedBools).filter(\n    name => namedBools[name]\n  );\n  return `${staticNames} ${conditionalNames.join(' ')}`.trim();\n};\n\nexport const mapToFunction = (seq, func) => Map(seq.map(x => [x, func(x)]));\n\nexport const mapToValue = (seq, value) => Map(seq.map(x => [x, value]));\n","import { Map } from 'immutable';\n\nexport const cellSize = 35;\n\nexport const gameStates = {\n  active: 0,\n  won: 1,\n  lost: 2,\n};\n\nexport const stateToName = state => Map(gameStates).flip().get(state);\n\nexport const gameFaces = {\n  0: 'ðŸ™‚',\n  1: 'ðŸ˜Ž',\n  2: 'ðŸ˜µ',\n};\n","import React from 'react';\nimport { getClsNames } from '../utils/utils';\nimport { cellSize } from '../utils/constants';\nimport { gameStates } from '../utils/constants';\nimport './cell.css';\n\nfunction Cell(props) {\n  const {\n    isMine,\n    mineCount,\n    isRevealed,\n    setIsRevealed,\n    isFlagged,\n    setIsFlagged,\n    gameState,\n    setGameState,\n  } = props;\n  const onClick = e => {\n    if (!gameState && !isFlagged) {\n      setIsRevealed();\n      if (isMine) {\n        setGameState(gameStates.lost);\n      }\n    }\n    e.preventDefault();\n  };\n\n  const onRightClick = e => {\n    setIsFlagged(!isFlagged);\n    e.preventDefault();\n  };\n\n  let content,\n    correct = false,\n    incorrect = false,\n    mineClass = {};\n\n  if (isRevealed || gameState) {\n    if (isMine) {\n      content = 'ðŸ’£';\n    } else {\n      content = mineCount || '';\n      mineClass[`m${mineCount}`] = true;\n    }\n    if (gameState) {\n      correct = isFlagged && isMine;\n      incorrect = isFlagged !== isMine;\n    }\n  } else {\n    content = isFlagged ? 'ðŸš©' : '';\n  }\n\n  const classNames = getClsNames(\n    { isRevealed, correct, incorrect, isFlagged, isMine, ...mineClass },\n    'cell'\n  );\n  const style = { width: cellSize, height: cellSize };\n\n  return (\n    <div\n      className={classNames}\n      onClick={onClick}\n      onContextMenu={onRightClick}\n      style={style}\n    >\n      {content}\n    </div>\n  );\n}\n\nexport default Cell;\n","import { List, Set } from 'immutable';\nimport { range2d, rand, sum, mapToFunction, mapToValue } from '../utils/utils';\n\nexport const generateField = (width, height, mineProb) => {\n  const coords = range2d(width, height);\n\n  const mineMap = mapToFunction(coords, _ => rand(mineProb));\n\n  // When outside the boundary it's `undefined || 0`\n  const isMine = z => mineMap.get(z) || 0;\n\n  const countAround = z => sum(neighbours(z, coords).map(isMine));\n\n  const countMap = mapToFunction(coords, countAround);\n\n  return {\n    mineMap,\n    countMap,\n  };\n};\n\nexport const getBoolMap = (width, height, value = false) =>\n  mapToValue(range2d(width, height), value);\n\n// prettier-ignore\nexport const neighbourCoords = ([x, y]) => (\n  [\n    [x-1, y-1], [x, y-1], [x+1, y-1],\n    [x-1, y],             [x+1, y],\n    [x-1, y+1], [x, y+1], [x+1, y+1],\n  ].map(List)\n);\n\nexport const neighbours = (z, coords) =>\n  neighbourCoords(z).filter(c => coords.includes(c));\n\nexport const neighboursForAll = (zs, coords) =>\n  Set(zs.flatMap(c => neighbours(c, coords)));\n\nexport const neighbouringZeros = (z, coords, countMap) => {\n  let fronteer = Set([z]);\n  let toReveal = Set();\n  let lastFrontier;\n\n  while (fronteer.size > 0) {\n    lastFrontier = Set(fronteer);\n    fronteer = Set();\n\n    fronteer = neighboursForAll(lastFrontier, coords)\n      .filterNot(c => toReveal.includes(c))\n      .filter(c => countMap.get(c) === 0);\n    toReveal = toReveal.union(fronteer);\n  }\n  return toReveal;\n};\n","import React from 'react';\n\nimport { range2d, mapToValue } from '../utils/utils';\nimport { cellSize, gameStates } from '../utils/constants';\nimport Cell from './cell';\nimport { neighbouringZeros, neighboursForAll } from '../logic/minefield';\nimport './board.css';\n\nfunction Board(props) {\n  const {\n    width,\n    height,\n    mineMap,\n    countMap,\n    revealMap,\n    setRevealMap,\n    flagMap,\n    setFlagMap,\n    gameState,\n    setGameState,\n  } = props;\n\n  const coords = range2d(width, height);\n\n  const checkGameOver = (revealMap, flagMap) => {\n    const untouched = coords.filter(c => !(flagMap.get(c) || revealMap.get(c)));\n\n    if (untouched.size === 0) {\n      setGameState(gameStates.won);\n    }\n  };\n\n  const cells = coords.map(z => {\n    const setIsRevealed = (\n      localRevealMap = revealMap,\n      localFlagMap = flagMap\n    ) => {\n      localRevealMap = localRevealMap.set(z, true);\n\n      if (countMap.get(z) === 0) {\n        const zeros = neighbouringZeros(z, coords, countMap);\n        const frontier = neighboursForAll(zeros, coords);\n        const reveal = zeros.union(frontier);\n        localRevealMap = localRevealMap.merge(mapToValue(reveal, true));\n        // unflag any cells included in the cascading reveal\n        localFlagMap = localFlagMap.mapEntries(([c, flagged]) => [\n          c,\n          flagged && !reveal.has(c),\n        ]);\n      }\n\n      setRevealMap(localRevealMap);\n      setFlagMap(localFlagMap);\n      checkGameOver(localRevealMap, localFlagMap);\n    };\n\n    const setIsFlagged = (value, localFlagMap = flagMap) => {\n      localFlagMap = localFlagMap.set(z, value);\n\n      setFlagMap(localFlagMap);\n      checkGameOver(revealMap, localFlagMap);\n    };\n\n    return (\n      <Cell\n        isMine={mineMap.get(z)}\n        mineCount={countMap.get(z)}\n        isRevealed={revealMap.get(z)}\n        setIsRevealed={setIsRevealed}\n        isFlagged={flagMap.get(z)}\n        setIsFlagged={setIsFlagged}\n        gameState={gameState}\n        setGameState={setGameState}\n        revealMap={revealMap}\n        key={z}\n      />\n    );\n  });\n  const widthPx = cellSize * width;\n  const heightPx = cellSize * height;\n  const style = { width: widthPx, height: heightPx };\n  return (\n    <div className=\"board\" style={style}>\n      {cells}\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\nimport { gameFaces, stateToName } from '../utils/constants';\n\nimport './score.css';\n\nfunction Score(props) {\n  const { gameState, minesLeft, newGameButton } = props;\n\n  const face = gameFaces[gameState];\n  return (\n    <div className=\"score-container\">\n      <button className=\"face\" onClick={newGameButton}>\n        <span role=\"img\" aria-label={stateToName(gameState)}>\n          {face}\n        </span>\n      </button>\n      <span className=\"score\">\n        {minesLeft}{' '}\n        <span role=\"img\" aria-label=\"mines left\">\n          ðŸ’£\n        </span>\n      </span>\n    </div>\n  );\n}\n\nexport default Score;\n","import React, { useState, useEffect } from 'react';\n\nimport Board from './board';\nimport Score from './score';\nimport { generateField, getBoolMap } from '../logic/minefield';\nimport { sum } from '../utils/utils';\nimport { gameStates, stateToName } from '../utils/constants';\nimport './game.css';\n\nfunction Game(props) {\n  const [width, setWidth] = useState(9);\n  const [gameState, setGameState] = useState(gameStates.active);\n  const [mineProb, setMineProb] = useState(0.1);\n\n  const height = width;\n\n  const createNewMaps = () => generateField(width, height, mineProb);\n  const [{ mineMap, countMap }, setMaps] = useState(createNewMaps);\n\n  const createNewBoolMap = () => getBoolMap(width, height);\n  const [revealMap, setRevealMap] = useState(createNewBoolMap);\n  const [flagMap, setFlagMap] = useState(createNewBoolMap);\n\n  useEffect(() => {\n    setMaps(generateField(width, height, mineProb));\n    setRevealMap(getBoolMap(width, height));\n    setFlagMap(getBoolMap(width, height));\n  }, [width, height, mineProb]);\n\n  const widthIncButton = e => {\n    setWidth(width + 1);\n  };\n\n  const widthDecButton = e => {\n    if (width > 1) {\n      setWidth(width - 1);\n    }\n  };\n\n  const roundToTenth = n => Math.round(10 * n) / 10;\n\n  const mineProbDecButton = e => {\n    setMineProb(Math.max(roundToTenth(mineProb - 0.1), 0));\n  };\n\n  const mineProbIncButton = e => {\n    setMineProb(Math.min(roundToTenth(mineProb + 0.1), 1));\n  };\n\n  const newGameButton = e => {\n    setGameState(gameStates.active);\n    setMaps(createNewMaps);\n    setRevealMap(createNewBoolMap);\n    setFlagMap(createNewBoolMap);\n  };\n\n  const mineCount = sum(mineMap.valueSeq());\n  const flagCount = sum(flagMap.valueSeq());\n  const minesLeft = mineCount - flagCount;\n\n  return (\n    <div className=\"container\">\n      <Score\n        gameState={gameState}\n        minesLeft={minesLeft}\n        newGameButton={newGameButton}\n      />\n      <Board\n        width={width}\n        height={height}\n        mineMap={mineMap}\n        countMap={countMap}\n        revealMap={revealMap}\n        setRevealMap={setRevealMap}\n        flagMap={flagMap}\n        setFlagMap={setFlagMap}\n        gameState={gameState}\n        setGameState={setGameState}\n      />\n      <div className=\"controls\">\n        <div>\n          Size: <button onClick={widthDecButton}>-</button>\n          {width}\n          <button onClick={widthIncButton}>+</button>\n        </div>\n        <div>\n          Mines density: <button onClick={mineProbDecButton}>-</button>\n          {mineProb}\n          <button onClick={mineProbIncButton}>+</button>\n        </div>\n        <div>Mines: {mineCount}</div>\n        <div>State: {stateToName(gameState)}</div>\n        <div>\n          New game:<button onClick={newGameButton}>go</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}